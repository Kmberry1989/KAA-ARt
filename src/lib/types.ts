import { z } from "zod";

export type Artwork = {
  id: string;
  title: string;
  artist: string;
  description: string;
  imageUrl: string;
  type: 'model' | 'plane';
  dimensions: {
    width: number;
    height: number;
    depth?: number;
  };
  createdAt: string;
};

export type Message = {
    id: string;
    sender: 'user' | 'ai';
    text: string | React.ReactNode;
};

// Types from art-info-query.ts
export const ArtInfoQueryInputSchema = z.object({
  artworkDescription: z
    .string()
    .describe('Description of the artwork being displayed.'),
  userQuery: z.string().describe('The user query about the artwork.'),
});
export type ArtInfoQueryInput = z.infer<typeof ArtInfoQueryInputSchema>;

export const ArtInfoQueryOutputSchema = z.object({
  answer: z.string().describe('The answer to the user query about the artwork.'),
});
export type ArtInfoQueryOutput = z.infer<typeof ArtInfoQueryOutputSchema>;

// Types from contextual-art-display.ts
export const ContextualArtDisplayInputSchema = z.object({
  artworkDescription: z
    .string()
    .describe('The description of the artwork to be displayed.'),
  userQuery: z
    .string()
    .describe(
      'The user query related to the artwork, requesting specific details or modifications to the display.'
    ),
});
export type ContextualArtDisplayInput = z.infer<typeof ContextualArtDisplayInputSchema>;

export const ContextualArtDisplayOutputSchema = z.object({
  modifiedDisplay:
    z.string().describe('The modified art display, incorporating highlights, annotations, or other changes based on the user query.'),
});
export type ContextualArtDisplayOutput = z.infer<typeof ContextualArtDisplayOutputSchema>;


// Types from image-to-plane.ts
export const ImageToPlaneInputSchema = z.object({
  title: z.string().describe('The title of the artwork.'),
  artist: z.string().describe('The name of the artist.'),
  description: z.string().describe('A short, engaging description of the artwork.'),
  dimensions: z.object({
      width: z.number().describe('The width of the artwork in meters.'),
      height: z.number().describe('The height of the artwork in meters.'),
    }).describe('The real-world dimensions of the artwork.'),
  imageDataUri: z
    .string()
    .describe(
      "A photo of the artwork, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ImageToPlaneInput = z.infer<typeof ImageToPlaneInputSchema>;

// The output schema no longer contains the 'id' field, as it will be generated by Firestore.
export const ImageToPlaneOutputSchema = z.object({
  title: z.string().describe('The title of the artwork.'),
  artist: z.string().describe('The name of the artist.'),
  description: z.string().describe('The description of the artwork.'),
  imageUrl: z.string().describe('The URL of the image (the provided data URI).'),
  type: z.string().describe("The type of artwork, which must be 'plane'."),
  dimensions: z.object({
    width: z.number(),
    height: z.number(),
  }),
}).refine((data) => data.type === 'plane', {
    message: "Artwork type must be 'plane'",
    path: ["type"],
});
export type ImageToPlaneOutput = Omit<z.infer<typeof ImageToPlaneOutputSchema>, 'id'>;
